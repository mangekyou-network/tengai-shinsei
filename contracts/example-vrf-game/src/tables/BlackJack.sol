// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("BlackJack")));
bytes32 constant BlackJackTableId = _tableId;

struct BlackJackData {
  uint256 userWins;
  uint256 userLosses;
  bool gameEnded;
  bool userWon;
  uint256[] userCards;
  uint256[] dealerCards;
}

library BlackJack {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.BOOL;
    _schema[3] = SchemaType.BOOL;
    _schema[4] = SchemaType.UINT256_ARRAY;
    _schema[5] = SchemaType.UINT256_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "userWins";
    _fieldNames[1] = "userLosses";
    _fieldNames[2] = "gameEnded";
    _fieldNames[3] = "userWon";
    _fieldNames[4] = "userCards";
    _fieldNames[5] = "dealerCards";
    return ("BlackJack", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get userWins */
  function getUserWins(address userAddress) internal view returns (uint256 userWins) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get userWins (using the specified store) */
  function getUserWins(IStore _store, address userAddress) internal view returns (uint256 userWins) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set userWins */
  function setUserWins(address userAddress, uint256 userWins) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((userWins)));
  }

  /** Set userWins (using the specified store) */
  function setUserWins(IStore _store, address userAddress, uint256 userWins) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((userWins)));
  }

  /** Get userLosses */
  function getUserLosses(address userAddress) internal view returns (uint256 userLosses) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get userLosses (using the specified store) */
  function getUserLosses(IStore _store, address userAddress) internal view returns (uint256 userLosses) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set userLosses */
  function setUserLosses(address userAddress, uint256 userLosses) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((userLosses)));
  }

  /** Set userLosses (using the specified store) */
  function setUserLosses(IStore _store, address userAddress, uint256 userLosses) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((userLosses)));
  }

  /** Get gameEnded */
  function getGameEnded(address userAddress) internal view returns (bool gameEnded) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get gameEnded (using the specified store) */
  function getGameEnded(IStore _store, address userAddress) internal view returns (bool gameEnded) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set gameEnded */
  function setGameEnded(address userAddress, bool gameEnded) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((gameEnded)));
  }

  /** Set gameEnded (using the specified store) */
  function setGameEnded(IStore _store, address userAddress, bool gameEnded) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((gameEnded)));
  }

  /** Get userWon */
  function getUserWon(address userAddress) internal view returns (bool userWon) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get userWon (using the specified store) */
  function getUserWon(IStore _store, address userAddress) internal view returns (bool userWon) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set userWon */
  function setUserWon(address userAddress, bool userWon) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((userWon)));
  }

  /** Set userWon (using the specified store) */
  function setUserWon(IStore _store, address userAddress, bool userWon) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((userWon)));
  }

  /** Get userCards */
  function getUserCards(address userAddress) internal view returns (uint256[] memory userCards) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Get userCards (using the specified store) */
  function getUserCards(IStore _store, address userAddress) internal view returns (uint256[] memory userCards) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Set userCards */
  function setUserCards(address userAddress, uint256[] memory userCards) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.setField(_tableId, _keyTuple, 4, EncodeArray.encode((userCards)));
  }

  /** Set userCards (using the specified store) */
  function setUserCards(IStore _store, address userAddress, uint256[] memory userCards) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.setField(_tableId, _keyTuple, 4, EncodeArray.encode((userCards)));
  }

  /** Get the length of userCards */
  function lengthUserCards(address userAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of userCards (using the specified store) */
  function lengthUserCards(IStore _store, address userAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 4, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of userCards (unchecked, returns invalid data if index overflows) */
  function getItemUserCards(address userAddress, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get an item of userCards (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemUserCards(IStore _store, address userAddress, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 4, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Push an element to userCards */
  function pushUserCards(address userAddress, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.pushToField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /** Push an element to userCards (using the specified store) */
  function pushUserCards(IStore _store, address userAddress, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.pushToField(_tableId, _keyTuple, 4, abi.encodePacked((_element)));
  }

  /** Pop an element from userCards */
  function popUserCards(address userAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.popFromField(_tableId, _keyTuple, 4, 32);
  }

  /** Pop an element from userCards (using the specified store) */
  function popUserCards(IStore _store, address userAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.popFromField(_tableId, _keyTuple, 4, 32);
  }

  /** Update an element of userCards at `_index` */
  function updateUserCards(address userAddress, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.updateInField(_tableId, _keyTuple, 4, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of userCards (using the specified store) at `_index` */
  function updateUserCards(IStore _store, address userAddress, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.updateInField(_tableId, _keyTuple, 4, _index * 32, abi.encodePacked((_element)));
  }

  /** Get dealerCards */
  function getDealerCards(address userAddress) internal view returns (uint256[] memory dealerCards) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Get dealerCards (using the specified store) */
  function getDealerCards(IStore _store, address userAddress) internal view returns (uint256[] memory dealerCards) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Set dealerCards */
  function setDealerCards(address userAddress, uint256[] memory dealerCards) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.setField(_tableId, _keyTuple, 5, EncodeArray.encode((dealerCards)));
  }

  /** Set dealerCards (using the specified store) */
  function setDealerCards(IStore _store, address userAddress, uint256[] memory dealerCards) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.setField(_tableId, _keyTuple, 5, EncodeArray.encode((dealerCards)));
  }

  /** Get the length of dealerCards */
  function lengthDealerCards(address userAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 5, getSchema());
    return _byteLength / 32;
  }

  /** Get the length of dealerCards (using the specified store) */
  function lengthDealerCards(IStore _store, address userAddress) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 5, getSchema());
    return _byteLength / 32;
  }

  /** Get an item of dealerCards (unchecked, returns invalid data if index overflows) */
  function getItemDealerCards(address userAddress, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 5, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get an item of dealerCards (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemDealerCards(IStore _store, address userAddress, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 5, getSchema(), _index * 32, (_index + 1) * 32);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Push an element to dealerCards */
  function pushDealerCards(address userAddress, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.pushToField(_tableId, _keyTuple, 5, abi.encodePacked((_element)));
  }

  /** Push an element to dealerCards (using the specified store) */
  function pushDealerCards(IStore _store, address userAddress, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.pushToField(_tableId, _keyTuple, 5, abi.encodePacked((_element)));
  }

  /** Pop an element from dealerCards */
  function popDealerCards(address userAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.popFromField(_tableId, _keyTuple, 5, 32);
  }

  /** Pop an element from dealerCards (using the specified store) */
  function popDealerCards(IStore _store, address userAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.popFromField(_tableId, _keyTuple, 5, 32);
  }

  /** Update an element of dealerCards at `_index` */
  function updateDealerCards(address userAddress, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.updateInField(_tableId, _keyTuple, 5, _index * 32, abi.encodePacked((_element)));
  }

  /** Update an element of dealerCards (using the specified store) at `_index` */
  function updateDealerCards(IStore _store, address userAddress, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.updateInField(_tableId, _keyTuple, 5, _index * 32, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(address userAddress) internal view returns (BlackJackData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, address userAddress) internal view returns (BlackJackData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    address userAddress,
    uint256 userWins,
    uint256 userLosses,
    bool gameEnded,
    bool userWon,
    uint256[] memory userCards,
    uint256[] memory dealerCards
  ) internal {
    bytes memory _data = encode(userWins, userLosses, gameEnded, userWon, userCards, dealerCards);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    address userAddress,
    uint256 userWins,
    uint256 userLosses,
    bool gameEnded,
    bool userWon,
    uint256[] memory userCards,
    uint256[] memory dealerCards
  ) internal {
    bytes memory _data = encode(userWins, userLosses, gameEnded, userWon, userCards, dealerCards);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(address userAddress, BlackJackData memory _table) internal {
    set(
      userAddress,
      _table.userWins,
      _table.userLosses,
      _table.gameEnded,
      _table.userWon,
      _table.userCards,
      _table.dealerCards
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, address userAddress, BlackJackData memory _table) internal {
    set(
      _store,
      userAddress,
      _table.userWins,
      _table.userLosses,
      _table.gameEnded,
      _table.userWon,
      _table.userCards,
      _table.dealerCards
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (BlackJackData memory _table) {
    // 66 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 66));

    _table.userWins = (uint256(Bytes.slice32(_blob, 0)));

    _table.userLosses = (uint256(Bytes.slice32(_blob, 32)));

    _table.gameEnded = (_toBool(uint8(Bytes.slice1(_blob, 64))));

    _table.userWon = (_toBool(uint8(Bytes.slice1(_blob, 65))));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 66) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 98;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.userCards = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.dealerCards = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint256 userWins,
    uint256 userLosses,
    bool gameEnded,
    bool userWon,
    uint256[] memory userCards,
    uint256[] memory dealerCards
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](2);
    _counters[0] = uint40(userCards.length * 32);
    _counters[1] = uint40(dealerCards.length * 32);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        userWins,
        userLosses,
        gameEnded,
        userWon,
        _encodedLengths.unwrap(),
        EncodeArray.encode((userCards)),
        EncodeArray.encode((dealerCards))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(address userAddress) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));
  }

  /* Delete all data for given keys */
  function deleteRecord(address userAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, address userAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160((userAddress))));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
